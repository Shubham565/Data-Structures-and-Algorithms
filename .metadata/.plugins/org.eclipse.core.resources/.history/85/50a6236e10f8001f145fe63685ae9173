package com.bhambey.BS2Darrays;

import java.util.ArrayList;

public class BinarySearchMatrixUtil {

	private static int lowerBoundOfOnes(ArrayList<Integer> arr, int m, int x) {

		int low = 0, high = m - 1;
		int ans = m;

		while (low <= high) {
			int mid = low + (high - low) / 2;

			if (arr.get(mid) >= x) {
				high = mid - 1;
				ans = mid;
			} else {
				low = mid + 1;
			}
		}
		return ans;
	}

	public static int rowWithMaximumOnes(ArrayList<ArrayList<Integer>> matrix, int n, int m) {

		/*
		 * Time Complexity: O(n X logm), where n = given row number, m = given column
		 * number.
		 * 
		 * Reason: We are using a loop running for n times to traverse the rows. Then we
		 * are applying binary search on each row with m columns.
		 * 
		 * Space Complexity: O(1) as we are not using any extra space.
		 */
		
		int countMaxOnes = 0;
		int index = -1;

		for (int i = 0; i < n; i++) {
			int countOnesInGivenRow = m - lowerBoundOfOnes(matrix.get(i), m, 1);

			if (countOnesInGivenRow > countMaxOnes) {
				countMaxOnes = countOnesInGivenRow;
				index = i;
			}
		}
		return index;
	}

	
	public static boolean searchInSorted2DMatrix(ArrayList<ArrayList<Integer>> matrix, int target) {

		/*
		 * Time Complexity: O(log(NxM)), where N = given row number, M = given column
		 * number.
		 * 
		 * Reason: We are applying binary search on the imaginary 1D array of size NxM.
		 * 
		 * Space Complexity: O(1) as we are not using any extra space.
		 */
		
		int n = matrix.size();
		int m = matrix.get(0).size();

		int low = 0, high = (n * m - 1);

		while (low <= high) {
			int mid = low + (high - low) / 2;
			int row = mid / m, col = mid % m;

			if (matrix.get(row).get(col) == target) {
				return true;
			} else if (matrix.get(row).get(col) < target) {
				low = mid + 1;
			} else {
				high = mid - 1;
			}

		}

		return false;
	}

	
	public static boolean searchInRowAndColumnSortedMatrix(ArrayList<ArrayList<Integer>> matrix, int target) {

		int n = matrix.size();
		int m = matrix.get(0).size();

		int row = 0, col = m - 1;

		while (row < n && col >= 0) {
			if (matrix.get(row).get(col) == target)
				return true;
			else if (matrix.get(row).get(col) < target)
				row++;
			else
				col--;
		}

		return false;
	}

	private static int countSmallEqual(int[][] matrix, int m, int n, int mid) {
		// TODO Auto-generated method stub
		return 0;
	}
	
	public static int medianInRowWiseSortedMatrix(int[][] matrix, int m, int n) {

		int low = Integer.MAX_VALUE, high = Integer.MIN_VALUE;

		for (int i = 0; i < m; i++) {
			low = Math.min(matrix[i][0], low);
			high = Math.max(matrix[i][n], low);
		}
		
		int req = (m * n) / 2;
		
		while(low <= high)
		{
			int mid =  low + (high - low)/2;
			int smallEqual = countSmallEqual(matrix, m, n, mid);
		}

		return 0;
	}

	
	
	
}
